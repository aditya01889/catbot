name: CatBot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_IMAGE: catbot

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_catbot
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_catbot
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_catbot
      run: |
        pytest --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: false

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags
    
    - name: Debug - Verify repository structure
      run: |
        echo "Current directory: $(pwd)"
        echo "\nRepository contents:"
        ls -la
        echo "\nFrontend directory contents:"
        ls -la frontend/
        echo "\npackage-lock.json exists: $(if [ -f 'frontend/package-lock.json' ]; then echo 'YES'; else echo 'NO'; fi)"
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install frontend dependencies
      run: |
        echo "Current directory: $(pwd)"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        
        # Navigate to frontend directory
        cd frontend
        echo "\nWorking in: $(pwd)"
        
        # Generate package-lock.json if it doesn't exist
        if [ ! -f "package-lock.json" ]; then
          echo "package-lock.json not found, generating..."
          npm install --package-lock-only --no-audit
        fi
        
        # Verify package-lock.json exists
        echo "\nVerifying package-lock.json exists..."
        if [ -f "package-lock.json" ]; then
          echo "package-lock.json exists, size: $(stat -f%z package-lock.json) bytes"
          echo "First few lines:"
          head -n 5 package-lock.json
        else
          echo "ERROR: package-lock.json still not found after generation attempt"
          ls -la ./
          exit 1
        fi
        
        # Install dependencies with legacy peer deps to handle TypeScript version conflicts
        echo "\nInstalling dependencies with legacy peer deps..."
        npm ci --no-audit --legacy-peer-deps || {
          echo "\nnpm ci failed, falling back to npm install..."
          npm install --no-audit --legacy-peer-deps
        }
    
    - name: Run tests
      working-directory: ./frontend
      run: |
        npm test -- --watchAll=false --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        fail_ci_if_error: false

  build-and-deploy:
    name: Build and Deploy
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Build and push Docker image
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./backend/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
    
    - name: Deploy - Build and Push Docker Images
      if: github.ref == 'refs/heads/main'
      run: |
        # Build and push frontend
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/catbot-frontend:latest -f frontend/Dockerfile frontend/
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/catbot-frontend:latest
        
        # Build and push backend
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/catbot-backend:latest -f backend/Dockerfile .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/catbot-backend:latest
        
        echo "ðŸš€ Deployment artifacts ready!"
        echo ""
        echo "=== LOCAL DEPLOYMENT INSTRUCTIONS ==="
        echo "1. Create a directory for deployment:"
        echo "   mkdir -p ~/catbot-deployment && cd ~/catbot-deployment"
        echo ""
        echo "2. Create docker-compose.yml:"
        echo "   touch docker-compose.yml"
        echo "   # Add the docker-compose configuration from the next step"
        echo ""
        echo "3. Create update.sh:"
        echo "   echo '#!/bin/bash' > update.sh"
        echo "   echo 'cd ~/catbot-deployment' >> update.sh"
        echo "   echo 'docker-compose pull' >> update.sh"
        echo "   echo 'docker-compose up -d' >> update.sh"
        echo "   echo 'echo "âœ… Deployment updated!"' >> update.sh"
        echo "   echo 'docker-compose ps' >> update.sh"
        echo "   chmod +x update.sh"
        echo ""
        echo "4. Run the update script:"
        echo "   ./update.sh"
        echo ""
        echo "Access your application at http://localhost:3000"
        echo ""
        echo "=== DOCKER-COMPOSE.YML ==="
        echo "version: \"3.8\""
        echo "services:"
        echo "  frontend:"
        echo "    image: $DOCKERHUB_USERNAME/catbot-frontend:latest"
        echo "    ports:"
        echo "      - \"3000:3000\""
        echo "    environment:"
        echo "      - NODE_ENV=production"
        echo "    restart: unless-stopped"
        echo ""
        echo "  backend:"
        echo "    image: $DOCKERHUB_USERNAME/catbot-backend:latest"
        echo "    ports:"
        echo "      - \"8000:8000\""
        echo "    environment:"
        echo "      - NODE_ENV=production"
        echo "    restart: unless-stopped"
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
